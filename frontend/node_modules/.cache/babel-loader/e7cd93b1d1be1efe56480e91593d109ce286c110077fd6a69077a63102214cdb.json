{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\Bragboard-Intern\\\\frontend\\\\src\\\\components\\\\navbar.jsx\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\n// IMPORTANT: We should not rely on a local state/prop for isLoggedIn.\n// The actual logic (Week 2, Step 3) will be to check if a JWT token exists.\n// For now, we'll use a variable to simulate the two states.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Navbar = () => {\n  // --- Start: Logic for conditional display (MUST be replaced later) ---\n  // If a user has a JWT token, they are logged in. For now, let's use a flag.\n  // Set this to 'false' to see the Register/Login buttons for testing.\n  const isLoggedIn = false;\n  // --- End: Logic for conditional display ---\n\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"bg-blue-600 p-4 shadow-md sticky top-0 z-10\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto flex justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        className: \"text-white text-2xl font-bold\",\n        children: \"BragBoard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), isLoggedIn ?\n      /*#__PURE__*/\n      // 1. If LOGGED IN: Show User Info and Logout\n      _jsxDEV(\"div\", {\n        className: \"flex items-center space-x-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-white text-lg\",\n          children: \"Hello, User!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-white text-blue-600 px-3 py-1 rounded-md font-medium hover:bg-gray-200 transition\"\n          // When implementing real auth: onClick should remove the JWT token\n          ,\n          onClick: () => console.log('Logout clicked'),\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // 2. If LOGGED OUT: Show Register and Login buttons\n      _jsxDEV(\"div\", {\n        className: \"flex space-x-4\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/register\",\n          className: \"text-white font-medium hover:text-gray-200 transition\",\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/login\",\n          className: \"bg-white text-blue-600 px-3 py-1 rounded-md font-medium hover:bg-gray-200 transition\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_c = Navbar;\nexport default Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["React","Link","jsxDEV","_jsxDEV","Navbar","isLoggedIn","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","onClick","console","log","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Documents/Bragboard-Intern/frontend/src/components/navbar.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// IMPORTANT: We should not rely on a local state/prop for isLoggedIn.\r\n// The actual logic (Week 2, Step 3) will be to check if a JWT token exists.\r\n// For now, we'll use a variable to simulate the two states.\r\n\r\nconst Navbar = () => {\r\n  // --- Start: Logic for conditional display (MUST be replaced later) ---\r\n  // If a user has a JWT token, they are logged in. For now, let's use a flag.\r\n  // Set this to 'false' to see the Register/Login buttons for testing.\r\n  const isLoggedIn = false; \r\n  // --- End: Logic for conditional display ---\r\n\r\n  return (\r\n    <nav className=\"bg-blue-600 p-4 shadow-md sticky top-0 z-10\">\r\n      <div className=\"container mx-auto flex justify-between items-center\">\r\n        \r\n        {/* App Title/Home Link */}\r\n        <Link to=\"/\" className=\"text-white text-2xl font-bold\">\r\n          BragBoard\r\n        </Link>\r\n\r\n        {/* --- Dynamic Links based on Login Status --- */}\r\n        {isLoggedIn ? (\r\n          // 1. If LOGGED IN: Show User Info and Logout\r\n          <div className=\"flex items-center space-x-4\">\r\n            {/* Placeholder for User Info (Update this in Week 2, Step 3) */}\r\n            <span className=\"text-white text-lg\">Hello, User!</span>\r\n\r\n            {/* Logout Button */}\r\n            <button\r\n              className=\"bg-white text-blue-600 px-3 py-1 rounded-md font-medium hover:bg-gray-200 transition\"\r\n              // When implementing real auth: onClick should remove the JWT token\r\n              onClick={() => console.log('Logout clicked')} \r\n            >\r\n              Logout\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          // 2. If LOGGED OUT: Show Register and Login buttons\r\n          <div className=\"flex space-x-4\">\r\n            \r\n            {/* Register Button/Link */}\r\n            <Link \r\n              to=\"/register\" \r\n              className=\"text-white font-medium hover:text-gray-200 transition\"\r\n            >\r\n              Register\r\n            </Link>\r\n\r\n            {/* Login Button/Link */}\r\n            <Link \r\n              to=\"/login\" \r\n              className=\"bg-white text-blue-600 px-3 py-1 rounded-md font-medium hover:bg-gray-200 transition\"\r\n            >\r\n              Login\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,kBAAkB;;AAEvC;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACnB;EACA;EACA;EACA,MAAMC,UAAU,GAAG,KAAK;EACxB;;EAEA,oBACEF,OAAA;IAAKG,SAAS,EAAC,6CAA6C;IAAAC,QAAA,eAC1DJ,OAAA;MAAKG,SAAS,EAAC,qDAAqD;MAAAC,QAAA,gBAGlEJ,OAAA,CAACF,IAAI;QAACO,EAAE,EAAC,GAAG;QAACF,SAAS,EAAC,+BAA+B;QAAAC,QAAA,EAAC;MAEvD;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EAGNP,UAAU;MAAA;MACT;MACAF,OAAA;QAAKG,SAAS,EAAC,6BAA6B;QAAAC,QAAA,gBAE1CJ,OAAA;UAAMG,SAAS,EAAC,oBAAoB;UAAAC,QAAA,EAAC;QAAY;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAGxDT,OAAA;UACEG,SAAS,EAAC;UACV;UAAA;UACAO,OAAO,EAAEA,CAAA,KAAMC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAE;UAAAR,QAAA,EAC9C;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;MAAA;MAEN;MACAT,OAAA;QAAKG,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAG7BJ,OAAA,CAACF,IAAI;UACHO,EAAE,EAAC,WAAW;UACdF,SAAS,EAAC,uDAAuD;UAAAC,QAAA,EAClE;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAGPT,OAAA,CAACF,IAAI;UACHO,EAAE,EAAC,QAAQ;UACXF,SAAS,EAAC,sFAAsF;UAAAC,QAAA,EACjG;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACI,EAAA,GAxDIZ,MAAM;AA0DZ,eAAeA,MAAM;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}